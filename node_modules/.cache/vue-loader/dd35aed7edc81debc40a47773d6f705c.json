{"remainingRequest":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/src/components/gamePhaseComponents/MapManager.vue?vue&type=style&index=0&id=1ed5c98a&lang=scss&scoped=true","dependencies":[{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/src/components/gamePhaseComponents/MapManager.vue","mtime":1614109361208},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/css-loader/dist/cjs.js","mtime":1612540687833},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1612540688641},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/postcss-loader/src/index.js","mtime":1612540688237},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/sass-loader/dist/cjs.js","mtime":1612540688493},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/cache-loader/dist/cjs.js","mtime":1612540687717},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/vue-loader-v16/dist/index.js","mtime":1612540688641}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoNCi5tYXAtbWFuYWdlcl9fbWFpbi1wYW5lbHsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCiAgYm9yZGVyLXJhZGl1czogMCAyMHB4IDIwcHggMDsNCn0NCg=="},{"version":3,"sources":["/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/src/components/gamePhaseComponents/MapManager.vue"],"names":[],"mappings":";;AAkKA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;AAC9B","file":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/src/components/gamePhaseComponents/MapManager.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"map-manager__main-panel\"\r\n       id=\"map-manager__main-panel\"\r\n       @mousedown=\"mouseDown\"\r\n       @mousemove=\"mouseMove\"\r\n       @mouseup=\"mouseUp\"></div>\r\n</template>\r\n\r\n<script>\r\nimport *  as PIXI from \"pixi.js-legacy\";\r\nimport {\r\n  backgroundTilesetDimension,\r\n  //getContainerFromPathObject,\r\n  getContainerFromStations,\r\n  keyPressed,\r\n  mapDimension,\r\n  mouseWheelReductionFactor,\r\n  pathsTilesetDimension,\r\n  stationsTilesetDimension,\r\n  tileSize,\r\n  zoomFunctionBase\r\n} from \"../../constants/mapConstants\";\r\nimport stations from \"../../constants/stations\";\r\nimport {onMounted, computed, ref} from \"vue\";\r\nimport pathsTilesetImage from \"../../assets/pathsTileset.png\";\r\nimport stationsTilesetImage from \"../../assets/stationsTileset.png\";\r\nimport backgroundTilesetImage from \"../../assets/backgroundTileset.png\";\r\nimport paths from \"../../constants/paths\";\r\nimport backgrounds from \"../../constants/background\";\r\nexport default {\r\n  name: \"MapManager\",\r\n  setup() {\r\n    const deltaY = ref(0);\r\n    const dragging = ref(false);\r\n    const scale = computed(function (){\r\n      return Math.pow(zoomFunctionBase, deltaY.value/mouseWheelReductionFactor);\r\n    });\r\n\r\n    const app = new PIXI.Application({\r\n      width: tileSize * mapDimension.width,\r\n      height: tileSize * mapDimension.height,\r\n      transparent: true,\r\n      antialias: false\r\n    });\r\n\r\n    PIXI.settings.ROUND_PIXELS = true;\r\n\r\n    app.loader\r\n        .add(\"pathsTileset\", pathsTilesetImage)\r\n        .add(\"stationsTileset\", stationsTilesetImage)\r\n        .add(\"backgroundTileset\", backgroundTilesetImage)\r\n        .load((loader, resources) => {\r\n\r\n          //crop tilesets to get tiles textures\r\n\r\n          let pathsTextures = [];\r\n          for (let i = 0; i < pathsTilesetDimension.width * pathsTilesetDimension.height; i++) {\r\n            let x = i % pathsTilesetDimension.width;\r\n            let y = Math.floor(i / pathsTilesetDimension.width);\r\n            pathsTextures[i] = new PIXI.Texture(\r\n                resources.pathsTileset.texture,\r\n                new PIXI.Rectangle(x * tileSize, y * tileSize, tileSize, tileSize)\r\n            );\r\n          }\r\n\r\n          let stationsTextures = [];\r\n          for (let i = 0; i < stationsTilesetDimension.width * stationsTilesetDimension.height; i++) {\r\n            let x = i % stationsTilesetDimension.width;\r\n            let y = Math.floor(i / stationsTilesetDimension.width);\r\n            stationsTextures[i] = new PIXI.Texture(\r\n                resources.stationsTileset.texture,\r\n                new PIXI.Rectangle(x * tileSize, y * tileSize, tileSize, tileSize)\r\n            );\r\n          }\r\n\r\n          let backgroundTextures = [];\r\n          for (let i = 0; i < backgroundTilesetDimension.width * backgroundTilesetDimension.height; i++) {\r\n            let x = i % backgroundTilesetDimension.width;\r\n            let y = Math.floor(i / backgroundTilesetDimension.width);\r\n            backgroundTextures[i] = new PIXI.Texture(\r\n                resources.backgroundTileset.texture,\r\n                new PIXI.Rectangle(x * tileSize, y * tileSize, tileSize, tileSize)\r\n            );\r\n          }\r\n\r\n          let links = new PIXI.Container();\r\n          let background = new PIXI.Container();\r\n          for (let row = 0; row < mapDimension.height; row++){\r\n            for (let col = 0; col < mapDimension.width; col++){\r\n              let pathTexture = pathsTextures[paths[row][col]];\r\n              let pathSprite = new PIXI.Sprite(pathTexture);\r\n              pathSprite.x = tileSize * col;\r\n              pathSprite.y = tileSize * row;\r\n              links.addChild(pathSprite);\r\n\r\n              let backgroundTexture = backgroundTextures[backgrounds[row][col]];\r\n              let backgroundSprite = new PIXI.Sprite(backgroundTexture);\r\n              backgroundSprite.x = tileSize * col;\r\n              backgroundSprite.y = tileSize * row;\r\n              background.addChild(backgroundSprite);\r\n            }\r\n          }\r\n          //app.stage.addChild(background);\r\n          app.stage.addChild(links);\r\n          app.stage.addChild(getContainerFromStations(stations, tileSize, stationsTextures));\r\n        });\r\n\r\n\r\n    app.loader.onError.add((e)=>{\r\n      console.error(e);\r\n    });\r\n\r\n    function mouseDown() {\r\n      dragging.value = true;\r\n    }\r\n\r\n    function mouseMove(event) {\r\n      if(dragging.value){\r\n        event.target.parentNode.style.cursor = \"move\";\r\n        event.target.parentNode.scrollLeft -= event.movementX;\r\n        event.target.parentNode.scrollTop -= event.movementY;\r\n      }\r\n    }\r\n\r\n    function mouseUp(event) {\r\n      dragging.value = false;\r\n      event.target.parentNode.style.cursor = \"auto\";\r\n    }\r\n\r\n    function zoom(event) {\r\n      let zoomFactor = 1;\r\n      if(deltaY.value+event.deltaY<0){\r\n        deltaY.value = 0;\r\n      } else {\r\n        deltaY.value += event.deltaY;\r\n        zoomFactor = Math.pow(zoomFunctionBase, event.deltaY/mouseWheelReductionFactor);\r\n      }\r\n      let panel = document.querySelector(\".map-manager__main-panel\");\r\n      let sL = event.offsetX*(zoomFactor-1)+panel.scrollLeft*zoomFactor;\r\n      let sT = event.offsetY*(zoomFactor-1)+panel.scrollTop*zoomFactor;\r\n      panel.scrollLeft = Math.round(sL);\r\n      panel.scrollTop = Math.round(sT);\r\n    }\r\n\r\n    onMounted(() => {\r\n      document.getElementById(\"map-manager__main-panel\").appendChild(app.view);\r\n      window.addEventListener(\"keydown\", keyPressed);\r\n    });\r\n\r\n    return{\r\n      scale,\r\n      mouseDown,\r\n      mouseMove,\r\n      mouseUp,\r\n      zoom\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n.map-manager__main-panel{\r\n  overflow: hidden;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 0 20px 20px 0;\r\n}\r\n</style>"]}]}