{"remainingRequest":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/babel-loader/lib/index.js!/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/src/views/Game.vue?vue&type=template&id=3614b62c","dependencies":[{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/src/views/Game.vue","mtime":1615885115931},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/cache-loader/dist/cjs.js","mtime":1612540687717},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/babel-loader/lib/index.js","mtime":1612540687689},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1612540688641},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/cache-loader/dist/cjs.js","mtime":1612540687717},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/node_modules/vue-loader-v16/dist/index.js","mtime":1612540688641}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAiZ2FtZV9fbWFpbi1wYW5lbCIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9Vc2VySGFtYnVyZ2VyTWVudSA9IF9yZXNvbHZlQ29tcG9uZW50KCJVc2VySGFtYnVyZ2VyTWVudSIpOwoKICB2YXIgX2NvbXBvbmVudF9QcmVHYW1lUGhhc2UgPSBfcmVzb2x2ZUNvbXBvbmVudCgiUHJlR2FtZVBoYXNlIik7CgogIHZhciBfY29tcG9uZW50X0dhbWVQaGFzZSA9IF9yZXNvbHZlQ29tcG9uZW50KCJHYW1lUGhhc2UiKTsKCiAgdmFyIF9jb21wb25lbnRfUG9zdEdhbWVQaGFzZSA9IF9yZXNvbHZlQ29tcG9uZW50KCJQb3N0R2FtZVBoYXNlIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X1VzZXJIYW1idXJnZXJNZW51LCB7CiAgICAic2hvdy1jaGF0IjogISEkZGF0YS5jdXJyZW50UGxheWVyLAogICAgbWVzc2FnZXM6ICRkYXRhLm1lc3NhZ2VzLAogICAgImRpc2FibGUtbG9nb3V0IjogdHJ1ZSwKICAgICJ1bnJlYWQtbWVzc2FnZXMiOiAkZGF0YS51bnJlYWRNZXNzYWdlcywKICAgIHNyYzogJGRhdGEuaGFtYnVyZ2VyTWVudUltYWdlLAogICAgc2hvdzogJGRhdGEuc2hvd0hhbWJ1cmdlck1lbnUsCiAgICBvbkNoYXRPcGVuZWQ6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEudW5yZWFkTWVzc2FnZXMgPSBmYWxzZTsKICAgIH0pLAogICAgb25TZW5kTWVzc2FnZTogJG9wdGlvbnMuc2VuZE1lc3NhZ2UsCiAgICBvblRvZ2dsZVNob3c6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuc2hvd0hhbWJ1cmdlck1lbnUgPSAkZXZlbnQ7CiAgICB9KQogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJzaG93LWNoYXQiLCAibWVzc2FnZXMiLCAidW5yZWFkLW1lc3NhZ2VzIiwgInNyYyIsICJzaG93IiwgIm9uU2VuZE1lc3NhZ2UiXSksICRkYXRhLnN0YXR1cyA9PT0gMCA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X1ByZUdhbWVQaGFzZSwgewogICAga2V5OiAwLAogICAgcGxheWVyczogJGRhdGEucGxheWVycywKICAgICJjdXJyZW50LXBsYXllciI6ICRkYXRhLmN1cnJlbnRQbGF5ZXIsCiAgICBvbkpvaW5nYW1lOiAkb3B0aW9ucy5qb2luR2FtZSwKICAgIG9uUXVpdGdhbWU6ICRvcHRpb25zLnF1aXRHYW1lLAogICAgb25LaWNrcGxheWVyOiAkb3B0aW9ucy5raWNrUGxheWVyLAogICAgb25DaGFuZ2Vjb2xvcjogJG9wdGlvbnMuY2hhbmdlQ29sb3IsCiAgICBvbkNoYW5nZW1pc3Rlcng6ICRvcHRpb25zLmNoYW5nZU1pc3RlclgsCiAgICBvblN0YXJ0Z2FtZTogJG9wdGlvbnMuc3RhcnRHYW1lCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbInBsYXllcnMiLCAiY3VycmVudC1wbGF5ZXIiLCAib25Kb2luZ2FtZSIsICJvblF1aXRnYW1lIiwgIm9uS2lja3BsYXllciIsICJvbkNoYW5nZWNvbG9yIiwgIm9uQ2hhbmdlbWlzdGVyeCIsICJvblN0YXJ0Z2FtZSJdKSkgOiAkZGF0YS5zdGF0dXMgPT09IDEgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9HYW1lUGhhc2UsIHsKICAgIGtleTogMSwKICAgIHBsYXllcnM6ICRkYXRhLnBsYXllcnMsCiAgICAiY3VycmVudC1wbGF5ZXIiOiAkZGF0YS5jdXJyZW50UGxheWVyLAogICAgZ2FtZTogJGRhdGEuZ2FtZSwKICAgICJjaGFuZ2VkLXN0YXR1cy1wYW5lbCI6ICRkYXRhLmNoYW5nZWRTdGF0dXNQYW5lbCwKICAgIG9uTW92ZTogJG9wdGlvbnMubW92ZSwKICAgIG9uQ2xvc2VTdGF0dXNDaGFuZ2VkUGFuZWw6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuY2hhbmdlZFN0YXR1c1BhbmVsLnNob3cgPSBmYWxzZTsKICAgIH0pLAogICAgb25Vc2VEb3VibGVUdXJuOiAkb3B0aW9ucy51c2VEb3VibGVUdXJuCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbInBsYXllcnMiLCAiY3VycmVudC1wbGF5ZXIiLCAiZ2FtZSIsICJjaGFuZ2VkLXN0YXR1cy1wYW5lbCIsICJvbk1vdmUiLCAib25Vc2VEb3VibGVUdXJuIl0pKSA6ICRkYXRhLnN0YXR1cyA9PT0gMiA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X1Bvc3RHYW1lUGhhc2UsIHsKICAgIGtleTogMiwKICAgIHBsYXllcnM6ICRkYXRhLnBsYXllcnMsCiAgICAiY3VycmVudC1wbGF5ZXIiOiAkZGF0YS5jdXJyZW50UGxheWVyLAogICAgZ2FtZTogJGRhdGEuZ2FtZSwKICAgICJnYW1lLXJlc3RhcnRlZCI6ICRkYXRhLmdhbWVSZXN0YXJ0ZWQsCiAgICBvblJlc3RhcnRHYW1lOiAkb3B0aW9ucy5yZXN0YXJ0R2FtZQogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJwbGF5ZXJzIiwgImN1cnJlbnQtcGxheWVyIiwgImdhbWUiLCAiZ2FtZS1yZXN0YXJ0ZWQiLCAib25SZXN0YXJ0R2FtZSJdKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldKTsKfQ=="},{"version":3,"sources":["/media/jacopo/VolumeDati/Documenti/papero.tk/unseen.papero.tk/src/views/Game.vue"],"names":[],"mappings":";;AACO,EAAA,KAAK,EAAC;;;;;;;;;;;uBAAX,YAAA,CAiCM,KAjCN,EAAA,UAAA,EAiCM,CAhCJ,YAAA,CAQ4D,4BAR5D,EAQ4D;AARxC,iBAAS,CAAA,CAAI,KAAA,CAAA,aAQ2B;AAPxC,IAAA,QAAQ,EAAE,KAAA,CAAA,QAO8B;AANxC,sBAAgB,IAMwB;AALxC,uBAAiB,KAAA,CAAA,cAKuB;AAJxC,IAAA,GAAG,EAAE,KAAA,CAAA,kBAImC;AAHxC,IAAA,IAAI,EAAE,KAAA,CAAA,iBAGkC;AAFxC,IAAA,YAAW,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,UAAA,MAAA;AAAA,aAAE,KAAA,CAAA,cAAA,GAAc,KAAhB;AAAA,KAAA,CAE6B;AADxC,IAAA,aAAY,EAAE,QAAA,CAAA,WAC0B;AAAxC,IAAA,YAAW,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,UAAA,MAAA;AAAA,aAAE,KAAA,CAAA,iBAAA,GAAkB,MAApB;AAAA,KAAA;AAA6B,GAR5D,E,IAAA,E;;AAAA,I,4EAAA,CAgCI,EAvBgB,KAAA,CAAA,MAAA,KAAM,C,kBAA1B,YAAA,CAQsC,uBARtC,EAQsC;UAAA;AAPvB,IAAA,OAAO,EAAE,KAAA,CAAA,OAOc;AANvB,sBAAgB,KAAA,CAAA,aAMO;AALvB,IAAA,UAAQ,EAAE,QAAA,CAAA,QAKa;AAJvB,IAAA,UAAQ,EAAE,QAAA,CAAA,QAIa;AAHvB,IAAA,YAAU,EAAE,QAAA,CAAA,UAGW;AAFvB,IAAA,aAAW,EAAE,QAAA,CAAA,WAEU;AADvB,IAAA,eAAa,EAAE,QAAA,CAAA,aACQ;AAAvB,IAAA,WAAS,EAAE,QAAA,CAAA;AAAY,GARtC,E,IAAA,E;;AAAA,I,4HAAA,C,IASsB,KAAA,CAAA,MAAA,KAAM,C,kBAA5B,YAAA,CAO6C,oBAP7C,EAO6C;UAAA;AANjC,IAAA,OAAO,EAAE,KAAA,CAAA,OAMwB;AALjC,sBAAgB,KAAA,CAAA,aAKiB;AAJjC,IAAA,IAAI,EAAE,KAAA,CAAA,IAI2B;AAHjC,4BAAsB,KAAA,CAAA,kBAGW;AAFjC,IAAA,MAAI,EAAE,QAAA,CAAA,IAE2B;AADjC,IAAA,yBAA0B,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,UAAA,MAAA;AAAA,aAAE,KAAA,CAAA,kBAAA,CAAmB,IAAnB,GAAuB,KAAzB;AAAA,KAAA,CACO;AAAjC,IAAA,eAAe,EAAE,QAAA,CAAA;AAAgB,GAP7C,E,IAAA,E;;AAAA,I,0FAAA,C,IAQ0B,KAAA,CAAA,MAAA,KAAM,C,kBAAhC,YAAA,CAK4C,wBAL5C,EAK4C;UAAA;AAJ5B,IAAA,OAAO,EAAE,KAAA,CAAA,OAImB;AAH5B,sBAAgB,KAAA,CAAA,aAGY;AAF5B,IAAA,IAAI,EAAE,KAAA,CAAA,IAEsB;AAD5B,sBAAgB,KAAA,CAAA,aACY;AAA5B,IAAA,aAAY,EAAE,QAAA,CAAA;AAAc,GAL5C,E,IAAA,E;;AAAA,I,wEAAA,C,qCAMI,CAjCN,C","sourcesContent":["<template>\n  <div class=\"game__main-panel\">\n    <UserHamburgerMenu :show-chat=\"!!currentPlayer\"\n                       :messages=\"messages\"\n                       :disable-logout=\"true\"\n                       :unread-messages=\"unreadMessages\"\n                       :src=\"hamburgerMenuImage\"\n                       :show=\"showHamburgerMenu\"\n                       @chat-opened=\"unreadMessages=false\"\n                       @send-message=\"sendMessage\"\n                       @toggle-show=\"showHamburgerMenu=$event\"/>\n    <PreGamePhase v-if=\"status===0\"\n                  :players=\"players\"\n                  :current-player=\"currentPlayer\"\n                  @joingame=\"joinGame\"\n                  @quitgame=\"quitGame\"\n                  @kickplayer=\"kickPlayer\"\n                  @changecolor=\"changeColor\"\n                  @changemisterx=\"changeMisterX\"\n                  @startgame=\"startGame\"/>\n    <GamePhase v-else-if=\"status===1\"\n               :players=\"players\"\n               :current-player=\"currentPlayer\"\n               :game=\"game\"\n               :changed-status-panel=\"changedStatusPanel\"\n               @move=\"move\"\n               @close-status-changed-panel=\"changedStatusPanel.show=false\"\n               @use-double-turn=\"useDoubleTurn\"/>\n    <PostGamePhase v-else-if=\"status===2\"\n                   :players=\"players\"\n                   :current-player=\"currentPlayer\"\n                   :game=\"game\"\n                   :game-restarted=\"gameRestarted\"\n                   @restart-game=\"restartGame\"/>\n  </div>\n</template>\n\n<script>\nimport mitt from \"mitt\";\nimport {colors, createLocalAccountUrl, getLoginInfoUrl, webSocketUrl} from \"../constants/constants\";\nimport events from \"../constants/webSocketEvents\";\nimport {useRoute} from \"vue-router\";\nimport io from \"socket.io-client\";\nimport {defineAsyncComponent} from \"vue\";\nimport PreGamePhase from \"../components/PreGamePhase\";\nimport GamePhase from \"../components/GamePhase\";\nimport PostGamePhase from \"../components/PostGamePhase\";\nimport store from \"../store\";\nimport axios from \"axios\";\n\nwindow.mitt = window.mitt || new mitt();\n\nconst UserHamburgerMenu = defineAsyncComponent(() => import(\"../components/UserHamburgerMenu\" /* webpackChunkName: \"userHamburgerMenu\" */));\n\nexport default {\n  name: \"Game\",\n  components: {\n    UserHamburgerMenu,\n    PreGamePhase,\n    GamePhase,\n    PostGamePhase\n  },\n  data(){\n    return {\n      socket: null,\n      gameId: useRoute().params.gameId,\n      status: undefined,\n      currentPlayer: undefined,\n      players: [],\n      game: {},\n      messages: [],\n      unreadMessages: false,\n      showHamburgerMenu: false,\n      changedStatusPanel: {\n        title: null,\n        description: null,\n        show: false\n      },\n      hamburgerMenuImage: require(\"@/assets/hamburger_icon_dark.png\"),\n      gameRestarted: null\n    }\n  },\n  methods: {\n    setupData(data) {\n      console.log(data);\n      let wasYourTurn;\n      if(this.currentPlayer) wasYourTurn = this.game.playingPlayer === this.currentPlayer.local_id;\n      let wasRevelation = this.game.isRevelation;\n      this.status = data.status;\n      if(data.your_local_id!=null){\n        data.players.forEach(player => {\n          if(player.local_id===data.your_local_id){\n            this.currentPlayer = player;\n          }\n        })\n      } else {\n        this.currentPlayer = null;\n      }\n      this.players = data.players;\n      this.game = {\n        playingPlayer: data.players_turn,\n        isRevelation: data.is_revelation_turn,\n        lastMisterXKnownPosition: data.last_known_position,\n        misterXMoves: data.mister_x_moves,\n        misterXWon: data.mister_x_won\n      }\n      if(this.currentPlayer) {\n        let isYourTurn = this.game.playingPlayer === this.currentPlayer.local_id;\n        if ( !wasYourTurn && isYourTurn ) this.handleYourTurn();\n      }\n\n      let isRevelation = this.game.isRevelation;\n      if(!wasRevelation && isRevelation) {\n        this.handleRevelation();\n      }\n      window.mitt.emit(\"update-pawns\", this.players);\n    },\n    appendMessage(data){\n      this.unreadMessages = true;\n      let message = {};\n      message.localId = data._from;\n      let {username, color, cssToastClass} = this.findInfoByLocalId(data._from);\n      message.username = username;\n      message.body = data.message;\n      message.color = color;\n      message.cssToastClass = cssToastClass;\n      message.fromYou = this.currentPlayer ? data._from === this.currentPlayer.local_id : false;\n      this.messages.push(message);\n      if(!message.fromYou) this.$toast.show(message.body, {\n        duration: 2000,\n        maxToasts: 4,\n        className: \"toast \"+message.cssToastClass\n      });\n      setTimeout(()=>{\n        let chat = document.getElementById(\"chat-container\");\n        if(chat) chat.scrollTop = chat.scrollHeight;\n      }, 100)\n    },\n    findInfoByLocalId(id){\n      for(let i = 0; i < this.players.length; i++){\n        if(this.players[i].local_id===id){\n          return {\n            username: this.players[i].username,\n            color: colors.cssColors[this.players[i].color+1],\n            cssToastClass: colors.cssToastClass[this.players[i].color+1]\n          }\n        }\n      }\n      return {};\n    },\n    joinGame() {\n      this.socket.emit(events.JOIN_GAME);\n    },\n    quitGame() {\n      this.socket.emit(events.QUIT_GAME);\n    },\n    kickPlayer(localId){\n      this.socket.emit(events.KICK_PLAYER, localId);\n    },\n    changeColor(newColor){\n      this.socket.emit(events.CHANGE_COLOR, newColor);\n    },\n    startGame(){\n      this.socket.emit(events.START_GAME);\n    },\n    changeMisterX(newMisterX){\n      this.socket.emit(events.CHANGE_MISTER_X, newMisterX);\n    },\n    sendMessage(message){\n      let msg = message;\n      msg._from = this.currentPlayer.local_id;\n      this.socket.emit(events.CHAT, msg);\n    },\n    move(event){\n      this.socket.emit(events.MOVE, event);\n    },\n    useDoubleTurn(){\n      this.socket.emit(events.USE_DOUBLE_TURN);\n    },\n    restartGame(event){\n      if(event) this.socket.emit(events.RESTART_GAME);\n      else this.socket.emit(events.GET_GAME);\n    },\n    handleEvents (title, description, time){\n      this.changedStatusPanel.title = title;\n      this.changedStatusPanel.description = description;\n      this.changedStatusPanel.show = true;\n      const show = async () => {\n        setTimeout(()=>{\n          this.changedStatusPanel.show = false;\n        }, time)\n      }\n      show();\n    },\n    handleYourTurn(){\n      this.$toast.show(\n          \"It's your turn\",\n          {\n            duration: 4000,\n            maxToasts: 4,\n            className: \"toast turn-notification\",\n            position: \"top\"\n          }\n      );\n    },\n    handleRevelation(){\n      let title = \"Revelation\";\n      let description;\n      if(!this.currentPlayer){\n        description = \"Mister X's position is \" + this.game.lastMisterXKnownPosition+\"!\";\n      } else if(this.currentPlayer.is_mister_x){\n        description = \"Your position was revealed! Be careful!\";\n      } else {\n        description = \"Mister X's position is \" + this.game.lastMisterXKnownPosition+\"! Go catch him!\";\n      }\n      this.handleEvents(title,\n          description,\n          4000);\n      this.players.forEach(player => {\n        if(player.is_mister_x) {\n          player.position = this.game.lastMisterXKnownPosition;\n          window.mitt.emit(\"zoom-to-default\");\n          window.mitt.emit(\"zoom-to-pawn\", player);\n        }\n      });\n    },\n    handleDoubleTurn(){\n      let title = \"Double turn\";\n      let description;\n      if(!this.currentPlayer){\n        description = \"Mister X played a double turn card\";\n      } else if(!this.currentPlayer.is_mister_x){\n        description = \"Oh no! Mister X played a double turn card, you were close!\";\n      } else {\n        this.currentPlayer.used_double_turns++;\n        description = \"Well played! Now you can move twice, they will surely lose your track!\";\n      }\n      this.handleEvents(title, description, 4000);\n    }\n  },\n  mounted() {\n    this.socket = io(webSocketUrl, {\n      path: \"/unseen/socket.io/\"\n    });\n\n    this.socket.on(\"connect\", ()=>{\n      console.log(\"connected\");\n      this.socket.emit(events.CONNECT_TO_GAME, {game_id: this.gameId});\n    });\n\n    this.socket.on(events.CONNECT_TO_GAME, (data) => {\n      this.setupData(data);\n    });\n\n    this.socket.on(events.LOBBY_MODIFIED, data => {\n      this.setupData(data);\n    });\n\n    this.socket.on(events.START_GAME, data => {\n      this.setupData(data);\n    });\n\n    this.socket.on(events.GAME_MODIFIED, data => {\n      this.setupData(data);\n    });\n\n    this.socket.on(events.USE_DOUBLE_TURN, this.handleDoubleTurn);\n\n    this.socket.on(events.CHAT, data => {\n      this.appendMessage(data);\n    });\n\n    this.socket.on(events.END_GAME, (data)=>{\n      this.handleEvents(\"Game Over\", \"The game finished\", 4000);\n      setTimeout(()=>{\n        this.setupData(data);\n      }, 4000)\n    });\n\n    this.socket.on(events.RESTART_GAME, ()=>{\n      this.gameRestarted = true;\n    });\n\n    this.socket.on(events.GET_GAME, (data)=>{\n      this.setupData(data);\n    });\n\n\n/*    this.status = 0;\n    this.currentPlayer = null/!*{\n      local_id: 0,\n      color: 1,\n      is_mister_x: false,\n      is_admin: true,\n      username: \"jacopo\",\n      used_taxi: 0,\n      used_bus: 0,\n      used_underground: 0,\n      used_secret_moves: 2,\n      used_double_turns: 0,\n      online: true,\n      position: 1,\n      available_moves: {\n        taxi: [8],\n        bus: [47, 59],\n        underground: [47]\n      }\n    }*!/\n    this.players = [\n      //this.currentPlayer,\n      {\n        local_id: 1,\n        color: -1,\n        is_mister_x: true,\n        is_admin: true,\n        username: \"matteo\",\n        online: true,\n        position: 2\n      },\n      {\n        local_id: 2,\n        color: 2,\n        is_mister_x: false,\n        is_admin: false,\n        username: \"rami\",\n        online: false,\n        position: 3\n      },\n      {\n        local_id: 3,\n        color: 3,\n        is_mister_x: false,\n        is_admin: false,\n        username: \"tave\",\n        online: true,\n        position: 4\n      }\n    ]\n    this.game = {\n      playingPlayer: 0,\n      lastMisterXKnownPosition: null,\n      misterXMoves: [\n        {\n          transport: 0,\n          position: 20\n        },\n        {\n          transport: 1,\n          position: 22\n        },\n        {\n          transport: 2,\n          position: 30\n        },\n        {\n          transport: 3,\n          position: 55\n        }\n      ]\n    }\n\n    this.messages = [\n      {\n        body: \"ciaooo\",\n        local_id: 0,\n        fromYou: false,\n        username: \"jacopo\",\n        color: \"gray\"\n      }\n    ];*/\n  },\n  beforeRouteEnter(to, from, next){\n    let id = to.params.gameId;\n    const regex = RegExp(\"[$&+,:;=?@#|'<>.-^*()%!àèéìòù°\\\"/£ç§{}¹²³¼½¬\\\\s]\", \"g\");\n    if(regex.test(id.toLowerCase())) {\n      next({name: to.name, params: {gameId: id.replaceAll(regex, \"\").toLowerCase()}});\n      return;\n    }\n    //next();\n    const createLocalAccount = ()=>{\n      axios\n          .get(createLocalAccountUrl)\n          .then((response) => {\n            store.dispatch(\"setUsername\", response.data.username);\n            store.dispatch(\"setLogged\", false);\n            next();\n          })\n          .catch(() => {\n            location.href = location.origin+\"/error?from=\"+location.pathname;\n          });\n    }\n    if(store.state.username === \"\" && store.state.logged === -1) { //se non è ancora stato trovato il logged\n      axios\n          .get(getLoginInfoUrl)\n          .then((response) => {\n            if (response.data) { //se è loggato in qualche modo\n              store.dispatch(\"setLogged\", response.data.google_signed_in);\n              store.dispatch(\"setUsername\", decodeURIComponent(response.data.username));\n\n              next(); //se è loggato in qualche modo può andare dove vuole\n\n            } else { //se non è loggato\n              createLocalAccount();\n            }\n          })\n          .catch(() => {\n            location.href = location.origin+\"/error?from=\"+location.pathname;\n          });\n    } else {\n      if(store.state.username === null){ //se non è loggato\n        createLocalAccount();\n      } else next(); //se è loggato\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../styles/global\";\n\n.game__main-panel{\n  background-image: url(\"../assets/background_image.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: bottom;\n\n  width: 100%;\n  height: 100%;\n  overflow-y: hidden;\n  @media (max-width: 700px) {\n    overflow: scroll;\n  }\n}\n\nbutton {\n  color: white;\n  padding: 1%;\n  background: transparent;\n  border: 2px solid white;\n  transition: all 0.5s;\n  margin: 1%;\n\n  &:hover{\n    background-color: white;\n    color: $theme-color-dark;\n  }\n\n  &:focus{\n    outline: none;\n  }\n}\n\n.toast{\n  display: grid;\n  align-items: center;\n  animation-duration: 150ms;\n  margin: 0.5em 0;\n  border-radius: 0.5em;\n  pointer-events: auto;\n  color: #fff;\n  background-color: orange;\n  min-height: 3em;\n  cursor: pointer;\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  padding: 0.5em 2em;\n  word-break: break-word;\n  width: fit-content;\n  align-self: flex-end;\n\n  &.turn-notification {\n    background-color: black;\n    align-self: center;\n    justify-content: start;\n  }\n\n  &.t0{background-color: #323232;}\n\n  &.t1{background-color: #ff3c00;}\n\n  &.t2{background-color: #0073ff;}\n\n  &.t3{background-color: #00c600;}\n\n  &.t4{background-color: #ff1493;}\n\n  &.t5{background-color: #ffbf00;}\n}\n</style>"],"sourceRoot":""}]}